@startuml
!theme reddress-darkblue

abstract class Pessoa {
	-String nome
	-String telefone
	-String email
	-String cpf
	-Endereco endereço
	-LocalDate dataNascimento
	-Status status
	-LocalDate criadoEm
	-LocalDate alteradoEm
	+getters() : type
	+setters() : void
}

class Cliente {
	-String observacao
	+Cliente()
	+getters() : type
	+setters() : void
}

abstract class Funcionario {
	-String rg
	-String escolaridade
	-integer numeroCarteiraTrabalho
	-LocalDate dataAdmissão
	-LocalDate dataDemissão
	+getters() : type
	+setters() : void
}

class Atendente{
	+Atendente()
	+processarPagamento() : void
	+registrarCliente(Cliente) : void
	+fecharComanda(Comanda) : void
}

class Garcom {
	+Garcom()
	+manipularMesa(Mesa) : void
	+criarComanda(Comanda) : void
	+adicionarItemComanda(ItemComanda, quantidade) : void
}

class Cozinheiro {
	+Cozinheiro()
	+atualizarStatusItem(ItemComanda) : void
}

class Supervisor {
	+Supervisor()
	+processarPagamento() : bool
	+registrarCliente(Cliente) : void
	+fecharComanda(Comanda) : bool
	+manipularMesa(Mesa) : void
	+criarComanda(Comanda) : void
	+adicionarItemComanda(ItemComanda, quantidade) : void
	+adicionarFuncionario(Funcionario) : void
	+atualizarFuncionario(Funcionario) : void
	+removerFuncionario(Funcionario) : void
}

class Endereco {
	-String pais
	-String estado
	-String cidade
	-String rua
	-Integer numero
	-String complemento
	-String cep
	-LocalDate criadoEm
	-LocalDate alteradoEm
	+Endereco()
	+getters() : type
	+setters() : void
}

class Mesa {
	-Garcom garcomAtual
	-Integer numero
	-statusMesa OcupacaoMesa
	-Integer quantidadeMaxima
	-LocalDate criadoEm
	-LocalDate alteradoEm
	+Mesa()
	+setGarcomMesa(Garcom)
	+ alocar(): void
	+ reservar(): void
	+ liberar(): void
	+ listarClientes(): void
	+getters() : type
	+setters() : void
}

class Comanda {
	-Mesa mesaAtual
	-Cliente clienteComanda
	-List<ItemComanda> listaItemComanda
	-statusComanda StatusPagaComanda
	-String codigoComanda
	-float valorTotal
	-LocalDate criadoEm
	-LocalDate alteradoEm
	+Comanda()
	+adicionarCliente(Cliente)
	+adicionarMesa(Mesa)
	+adicionarItemComanda(ItemComanda, quantidade) List<ItemComanda>
	+calcularTotal(List<ItemComanda>) valorTotal
	+pagarComanda() bool
	+getters() : type
	+setters() : void
}

class Produto {
	-String nome
	-String descricao
	-String codigo
	-float precoCusto
	-float precoVenda
	-Time tempoPreparo
	-Status status
	-LocalDate criadoEm
	-LocalDate alteradoEm
	+Produto()
	+ativar()
	+desativar()
	+getters() : type
	+setters() : void
}

class ItemComanda {
	-Comanda comandaVinculada
	-Produto produtoVinculado
	-Integer quantidade
	-StatusItemProduto StatusPreparo
	-String observacao
	-LocalDate criadoEm
	-LocalDate alteradoEm
	+ItemComanda
	+adicionarProduto(Produto, quantidade) bool
	+mudarStatusItem(StatusPreparo) bool
	+adicionarObservacao(Observacao) bool
	+getters() : type
	+setters() : void
}

class Cardapio {
	-String nome
	-List<Produto> listaProdutos
	-String codigo
	-Status status
	+Cardapio()
	+getters() : type
	+setters() : void
}

interface IAtendente {
	+processarPagamento() bool
	+registrarCliente(Cliente)
	+fecharComanda(Comanda) bool
}

interface IGarcom {
	+manipularMesa(Mesa)
	+criarComanda(Comanda)
	+adicionarItemComanda(ItemComanda, quantidade)
}

interface ICozinheiro {
	+atualizarStatusItem(ItemComanda)
}

interface ISupervisor {
	+adicionarFuncionario(Funcionario)
	+atualizarFuncionario(Funcionario)
	+removerFuncionario(Funcionario)
}

enum Status {
	ATIVO
	INATIVO
}

enum OcupacaoMesa {
	LIVRE
	RESERVADA
	OCUPADA
}

enum StatusItemProduto {
	PRONTO
	PREPARANDO
	AGUARDANDO
}

enum StatusPagaComanda {
	ABERTA
	PAGA
	FECHADA
}

Pessoa *-- Endereco
Funcionario --|> Pessoa
Cliente --|> Pessoa
Cliente --> Status
Funcionario --> Status
Atendente --|> Funcionario
Atendente .. IAtendente
Garcom --|> Funcionario
Garcom .. IGarcom
Cozinheiro --|> Funcionario
Cozinheiro .. ICozinheiro
Supervisor --|> Funcionario
Supervisor .. ISupervisor
Supervisor .. IAtendente
Supervisor .. IGarcom
Mesa --> OcupacaoMesa
Mesa --* Garcom
Comanda --> StatusPagaComanda
Mesa o-- Comanda
Cliente o-- Comanda
Produto --> Status
ItemComanda --> StatusItemProduto
ItemComanda --o Produto
ItemComanda --o Comanda
Cardapio --> Status
Cardapio --o Produto

@enduml
