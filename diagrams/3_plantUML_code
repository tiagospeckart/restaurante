@startuml
!theme reddress-darkblue

class Usuario {
    -int id
    -String codigo
    -String login
    -String senha
    -bool ativo
    +TipoUsuario tipoUsuario

    +Usuario()
    +getters() : type
    +setters() : void
}

abstract class Pessoa {
    -int id
    -String nome
    -String telefone
    -String email
    -String cpf
    -Endereco endereco
    -String observacao
    -LocalDate dataNascimento
    -LocalDate criadoEm
    -LocalDate alteradoEm

    +getters() : type
    +setters() : void
}

class Cliente {
    -int id
    -String alergias
    -bool vip

    +Cliente()
    +getters() : type
    +setters() : void
}

class Funcionario {
    -int id
    -String rg
    -int pis
    -Cargo cargo
    -EstadoCivil estadoCivil
    -Escolaridade escolaridade
    -LocalDate dataAdmissao
    -LocalDate dataDemissao
    -LocalDate criadoEm
    -LocalDate alteradoEm

    +Funcionario()
    +getters() : type
    +setters() : void
}

class Endereco {
    -int id
    -String pais
    -String estado
    -String cidade
    -String rua
    -int numero
    -String complemento
    -String cep
    -LocalDate criadoEm
    -LocalDate alteradoEm

    +Endereco()
    +getters() : type
    +setters() : void
}

class Mesa {
    -int id
    -String codigo
    -Funcionario funcionarioResponsavel
    -int numero
    -List<Comanda> comandas
    -OcupacaoMesa statusMesa
    -int quantidadeMaxima
    -LocalDate criadoEm
    -LocalDate alteradoEm

    +Mesa()
    +alocarFuncionario() : void
    +adicionarComanda(String codigo): void
    +reservar(): void
    +liberar(): void
    +listarClientes(): void
    +getters() : type
    +setters() : void
}

class Pedido {
    -int id
    -Produto produto
    -Timestamp dataSolicitacao
    -Timestamp dataHoraInicioPreparo
    -Timestamp tempoPreparoRestante
    -StatusPreparo statusPreparo
    -int quantidade
    -LocalDate criadoEm
    -LocalDate alteradoEm

    +Pedido()
    +adicionarQuantidadePedido(int quantidade) : void
    +getters() : type
    +setters() : void
}

class Comanda {
    -int id
    -String codigo
    -Mesa mesa
    -Cliente cliente
    -List<Pedido> pedidos
    -StatusPagaComanda statusComanda
    -String codigoComanda
    -double valorTotal
    -LocalDate criadoEm
    -LocalDate alteradoEm

    +Comanda()
    +adicionarPedido(Pedido pedido) : void
    +removerPedido(String codigo) : boolean
    +fecharComanda(String codigo) : boolean
    +calcularTotal(String codigo) : double
    +getters() : type
    +setters() : void
}

class Produto {
    -int id
    -String codigo
    -String nome
    -String descricao
    -double precoCusto
    -double precoVenda
    -String tempoPreparo
    -String observacoes
    -bool ativo
    -TipoProduto tipoProduto
    -LocalDate criadoEm
    -LocalDate alteradoEm

    +Produto()
    +ativar()
    +desativar()
    +getters() : type
    +setters() : void
}

class Cardapio {
    -int id
    -String nome
    -String codigo
    -List<Produto> listaProdutos
    -CategoriaCardapio categoria
    -bool ativo

    +Cardapio()
    +getters() : type
    +setters() : void
}

enum OcupacaoMesa {
    LIVRE
    RESERVADA
    OCUPADA
}

enum StatusPreparo {
    PRONTO
    PREPARANDO
    AGUARDANDO
    CONFIRMADO
}

enum StatusPagaComanda {
    ABERTA
    PAGA
    FECHADA
}

enum TipoUsuario {
    ADMINISTRADOR
    FUNCIONARIO
    CLIENTE
}

enum Cargo {
    FAXINEIRO
    CAIXA
    GARCOM
    COZINHEIRO
    ENTREGADOR
    GERENTE
}

enum EstadoCivil {
    SOLTEIRO
    CASADO
    DIVORCIADO
    VIUVO
    SEPARADO_JUDICIALMENTE
    UNIAO_ESTAVEL
}

enum Escolaridade {
    EDUCACAO_INFANTIL_INCOMPLETO
    EDUCACAO_INFANTIL_COMPLETO
    ENSINO_FUNDAMENTAL_INCOMPLETO
    ENSINO_FUNDAMENTAL_COMPLETO
    ENSINO_MEDIO_INCOMPLETO
    ENSINO_MEDIO_COMPLETO
    ENSINO_TECNICO_INCOMPLETO
    ENSINO_TECNICO_COMPLETO
    ENSINO_SUPERIOR_INCOMPLETO
    ENSINO_SUPERIOR_COMPLETO
    POS_GRADUACAO_INCOMPLETA
    POS_GRADUACAO_COMPLETA
    MESTRADO_INCOMPLETO
    MESTRADO_COMPLETO
    DOUTORADO_INCOMPLETO
    DOUTORADO_COMPLETO
}

enum TipoProduto {
    LANCHE
    BEBIDA
    SOBREMESA
}

enum CategoriaCadapio{
    LANCHE
    BEBIDA
    SOBREMESA
}

interface ICrud<T> {
    +create(obj : T) : T
    +read(id : String) : T
    +update(obj : T) : T
    +delete(id : String) : void
}

interface ICrudUsuario<extends ICrud<Usuario>> {}
interface ICrudCliente<extends ICrud<Cliente>> {}
interface ICrudFuncionario<extends ICrud<Funcionario>> {}
interface ICrudEndereco<extends ICrud<Endereco>> {}
interface ICrudMesa<extends ICrud<Mesa>> {}
interface ICrudComanda<extends ICrud<Comanda>> {}
interface ICrudProduto<extends ICrud<Produto>> {}
interface ICrudPedido<extends ICrud<Pedido>> {}
interface ICrudCardapio<extends ICrud<Cardapio>> {}

ICrud <|.. ICrudUsuario
ICrud <|.. ICrudCliente
ICrud <|.. ICrudFuncionario
ICrud <|.. ICrudEndereco
ICrud <|.. ICrudMesa
ICrud <|.. ICrudComanda
ICrud <|.. ICrudProduto
ICrud <|.. ICrudPedido
ICrud <|.. ICrudCardapio

Usuario .. ICrudUsuario
Cliente .. ICrudCliente
Funcionario .. ICrudFuncionario
Endereco .. ICrudEndereco
Mesa .. ICrudMesa
Comanda .. ICrudComanda
Produto .. ICrudProduto
Pedido .. ICrudPedido
Cardapio .. ICrudCardapio

Usuario --> TipoUsuario
Pessoa --|> Usuario : extends
Pessoa o-- Endereco
Funcionario --|> Pessoa : extends
Funcionario --> Cargo
Funcionario --> EstadoCivil
Funcionario --> Escolaridade
Cliente --|> Pessoa
Mesa --> OcupacaoMesa
Comanda --> StatusPagaComanda
Mesa o-- Comanda
Mesa o-- Funcionario
Cliente --o Comanda
Pedido --> StatusPreparo
Pedido --* Comanda
Produto --o Cardapio 
Produto --> TipoProduto
Produto --o Pedido
Cardapio --> CategoriaCadapio

@enduml
